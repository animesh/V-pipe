import logging
import glob
import os
import shutil
import configparser
from pathlib import Path
from itertools import product

LOGGER = logging.getLogger('snakemake.logging')

if not 'VPIPE_BASEDIR' in dir():
    VPIPE_BASEDIR = workflow.basedir
LOGGER.info('VPIPE_BASEDIR = %s', VPIPE_BASEDIR)

# Include config file parser and globals
VPIPE_BENCH = True
include: "rules/benchmark.smk"
functions = srcdir("functions.sh")

ALIGNERS = config.benchmark['aligners'].split(',')
SNV_CALLERS = config.benchmark['snv_callers'].split(',')
BENCH_RUNS = list(product(ALIGNERS, SNV_CALLERS))

configs = {}
for opts in BENCH_RUNS:
    dirname = '-'.join(opts)
    configs[dirname] = VPIPE_CONFIG()
    configs[dirname].general['aligner'] = opts[0]
    configs[dirname].general['snv_caller'] = opts[1]

# DUMMY RULE
rule allbenchRunner:
    input:
        expand("{dataset}/raw_data/simreads_R1.fastq", dataset=datasets),
        expand("{dataset}/raw_data/simreads_R2.fastq",
               dataset=datasets) if config.input['paired'] else [],
        [f'{bench_dir}/variants/SNV_calling_performance.tsv' for bench_dir in configs.keys()]


rule run_simBench:
    output:
        R1 = expand("{dataset}/raw_data/simreads_R1.fastq", dataset=datasets),
        R2 = expand("{dataset}/raw_data/simreads_R2.fastq",
                    dataset=datasets) if config.input['paired'] else [],
    params:
        scratch = '1250',
        mem = config.run_simBench['mem'],
        time = config.run_simBench['time'],
        BASEDIR = VPIPE_BASEDIR,
        SNAKEMAKE_OPTS = os.environ.get('SNAKEMAKE_OPTS', '')
    log:
        outfile = "logs/run_simBench.out.log",
        errfile = "logs/run_simBench.err.log",
    threads:
        1
    shell:
        """
        if [[ -z "{params.SNAKEMAKE_OPTS}" ]]; then
            {config.applications[snakemake]}  -s \
                {params.BASEDIR}/vpipeBench.snake \
                {config.benchmark[snakemake_options]} simulate_data
        else
            {config.applications[snakemake]} -s \
                {params.BASEDIR}/vpipeBench.snake \
                {params.SNAKEMAKE_OPTS} simulate_data
        fi
        """


localrules:
    prepare_run
rule prepare_run:
    input:
        R1 = expand("{dataset}/raw_data/simreads_R1.fastq", dataset=datasets),
        R2 = expand("{dataset}/raw_data/simreads_R2.fastq",
                    dataset=datasets) if config.input['paired'] else [],
    output:
        CONFIG_FILE = "{bench_dir}/vpipe.config",
        SAMPLES = "{bench_dir}/" + config.input['samples_file'],
        REF = "{bench_dir}/" + reference_file,
        R1 = expand("{bench_dir}/{dataset}/raw_data/simreads_R1.fastq",
                    dataset=datasets, allow_missing=True),
        R2 = expand("{bench_dir}/{dataset}/raw_data/simreads_R2.fastq",
                    dataset=datasets, allow_missing=True) if config.input['paired'] else [],
        HAPLOTYPE_REFs = expand(
            "{bench_dir}/{dataset}/references/haplotypes/haplotypes.fasta", dataset=datasets, allow_missing=True),
    run:
        # Copy reference file(s). Two expected locations: (1) current
        # directory, or (2) one level above.
        # Alternative: read references from samples-file and config, and move
        # any reference file located in the references sub-directory (e.g.,
        # cohort_consensus.fasta)
        if not config.simulate_haplotypes['use_master']:
            fasta_files = glob.glob("*/*.fasta")
            for file in fasta_files:
                dirname = os.path.dirname(file)
                if os.path.isfile(file):
                    dest = os.path.join(wildcards.bench_dir, dirname)
                    Path(dest).mkdir(parents=True, exist_ok=True)
                    shutil.copy(file, dest)
            fasta_files = glob.glob("*.fasta")
            for file in fasta_files:
                if os.path.isfile(file):
                    shutil.copy(file, wildcards.bench_dir)

        # Copy the config file with the necesary changes
        with open(output.CONFIG_FILE, 'w') as configfile:
            configs[wildcards.bench_dir].write(configfile)

        # Copy samples-file. Alternative: use symbolic links
        shutil.copy(config.input['samples_file'], output.SAMPLES)

        # Copy datadir
        shutil.copytree(config.input['datadir'], wildcards.bench_dir)


# TODO: handle special cases, e.g. dry-run (touch and clean files)
#       and clean rules
rule run_vpipeBench:
    input:
        "{bench_dir}/vpipe.config",
        "{bench_dir}/" + config.input['samples_file'],
    output:
        "{bench_dir}/variants/SNV_calling_performance.tsv"
    params:
        scratch = '1250',
        mem = config.run_vpipeBench['mem'],
        time = config.run_vpipeBench['time'],
        BASEDIR = VPIPE_BASEDIR,
        SNAKEMAKE_OPTS = os.environ.get('SNAKEMAKE_OPTS', '')
    log:
        outfile = "logs/run_vpipeBench.out.log",
        errfile = "logs/run_vpipeBench.err.log",
    threads:
        1
    shell:
        """
        if [[ -z "{params.SNAKEMAKE_OPTS}" ]]; then
            {config.applications[snakemake]}  -s \
                {params.BASEDIR}/vpipeBench.snake \
                -d {wildcards.bench_dir} {config.benchmark[snakemake_options]}
        else
            {config.applications[snakemake]} -s \
                {params.BASEDIR}/vpipeBench.snake \
                -d {wildcards.bench_dir} {params.SNAKEMAKE_OPTS}
        fi
        """
